I"xX<h2 id="what-is-var-let-and-const">what is var, let, and const</h2>

<p><span class="highlight__code">var</span>, <span class="highlight__code">let</span>, and <span class="highlight__code">const</span> are ways to declare variables. Each way has a slight difference on how they work. It is important to use these declarations the right way because they were made to benefit the developer and make code easier to understand.</p>

<p class="highlight__file-desc">
  JavaScript
</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// they are declared like this</span>

<span class="c1">// it is block scoped</span>
<span class="c1">// should only be used on stuff that is constant</span>
<span class="c1">// can not be reassign</span>
<span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Brian</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// it is block scoped</span>
<span class="c1">// can be assign a new value</span>
<span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>

<span class="c1">// the usual way to declare var before es6 syntax</span>
<span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">California</span><span class="dl">"</span>
</code></pre></div></div>

<h2 id="first-lets-talk-about-scope">first let’s talk about scope</h2>

<p>Scope is the way JavaScript finds and locates declarations. Block scope and function scope are really similar looking but have small differences.</p>

<h3 id="what-is-block-scope">what is block scope</h3>

<p>a block scope is defined with curly braces. when using var in a block scope it doesn’t conceal the variables from the outside. When using const or let inside curly braces it keeps the variables hidden from the outside.</p>

<p class="highlight__file-desc">
  JavaScript
</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// this is normal javascript</span>
<span class="p">{</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">10</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 10</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// 10</span>

<span class="p">{</span>
  <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">I am let in a block scoped</span><span class="dl">"</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="c1">// I am let in a block scoped</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="c1">// Uncaught ReferenceError: b is not defined</span>

<span class="p">{</span>
  <span class="kd">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">I am a const in a block scoped</span><span class="dl">"</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="c1">// I am a const in a block scoped</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="c1">// Uncaught ReferenceError: c is not defined</span>
</code></pre></div></div>

<p>Anything with a opening curly braces and closing curly brace creates a block scope. Other examples are if else statements and for loops.</p>

<h3 id="what-is-function-scope">What is Function Scope</h3>

<p>function scope is anything inside a function. It has the same rules as block scope just the way it is declared is different.</p>

<p class="highlight__file-desc">
  JavaScript
</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hi how are you</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">greetPerson</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">the function is saying hi</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">greetPerson</span><span class="p">();</span>
  <span class="c1">// print 'the function is saying hi'</span>
</code></pre></div></div>

<p>when calling <span class="highlight__code">greetPerson()</span> JavaScript finds the function and walks into the scope. It first checks the scope where <span class="highlight__code">console.log()</span> was executed, which is the function scope, then looks for the the variable greet it keeps going outwards until it reaches the global scope. This is why greet declared inside the function is printed in the console instead of the greet declared in the global scope.</p>

<h2 id="the-significance-of-var">The significance of var</h2>

<p><span class="highlight__code">var</span> was the way to declare variables before ES6.</p>

<p>It can be redeclared and reassigned.</p>

<p class="highlight__file-desc">
JavaScript
</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hi</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">cheers</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">);</span>
  <span class="c1">// print cheers</span>
</code></pre></div></div>

<p><span class="highlight__code">var</span> is hoisted and initialized to undefined.</p>

<p class="highlight__file-desc">
JavaScript
</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hoisted</span><span class="p">)</span> <span class="c1">// undefined</span>
<span class="kd">var</span> <span class="nx">hoisted</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hi</span><span class="dl">"</span>

</code></pre></div></div>

<p><span class="highlight__code">var</span> doesn’t care about block scope. If there is no <span class="highlight__code">var</span> declaration JavaScript assumes you meant to make it a variable and puts it in the global scope.</p>

<p class="highlight__file-desc">
JavaScript
</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// never do this</span>
  <span class="nx">hi</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hi</span><span class="dl">"</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">)</span> <span class="c1">// hello</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hi</span><span class="p">)</span> <span class="c1">// hi</span>
</code></pre></div></div>

<h3 id="why-var-sucks">why var sucks</h3>

<p>it pollutes the global scope.</p>

<p class="highlight__file-desc">
JavaScript
</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// code</span>
<span class="p">};</span>

<span class="c1">// i is on the global scope even though we don't need it</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// 10</span>
</code></pre></div></div>

<p>let’s say you have thousands of lines of code and don’t realize you used the same variable twice. Now you have a hard to find bug.</p>

<p class="highlight__file-desc">
JavaScript
</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hi</span><span class="dl">"</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">say this instead</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">)</span>
  <span class="c1">// print say this instead</span>
</code></pre></div></div>

<p>Since <span class="highlight__code">var</span> gets redefined it messes with the global scope version of the variable.</p>

<p>Overall only use <span class="highlight__code">var</span> as a stylistic choice by showing the reader that you are planning to use <span class="highlight__code">var</span> all over your code.</p>

<h2 id="the-significance-of-let">The significance of let</h2>

<p><span class="highlight__code">let</span> is usually the variable declaration that is used over <span class="highlight__code">var</span> because it has better features than <span class="highlight__code">var</span> does.</p>

<p>It can not be redeclared but can be redefined. This fixes the problem with var that we might accidentally redeclare a variable we didn’t want too.</p>

<p class="highlight__file-desc">JavaScript</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello there</span><span class="dl">"</span>

<span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">say this</span><span class="dl">"</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">)</span>
  <span class="c1">// print say this</span>

<span class="kd">let</span> <span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello there again</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// Uncaught SyntaxError: Identifier 'greet' has already been declared</span>
</code></pre></div></div>

<p><span class="highlight__code">let</span> is hoisted but not initialized.</p>

<p class="highlight__file-desc">JavaScript</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hoisted</span><span class="p">);</span>
<span class="c1">// Uncaught ReferenceError: hoisted is not defined</span>

<span class="kd">let</span> <span class="nx">hoisted</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hi I am hoisted but not initialized</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p><span class="highlight__code">let</span> uses block scope which means it can only be referenced in the same scope it was defined. This fixes the problem we had with <span class="highlight__code">var</span>.</p>

<p class="highlight__file-desc">JavaScript</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">);</span>
<span class="c1">// Uncaught ReferenceError: greet is not defined</span>
</code></pre></div></div>

<h3 id="why-use-let-over-var">why use let over var</h3>

<p><span class="highlight__code">let</span> doesn’t pollute the global scope.</p>

<p class="highlight__file-desc">JavaScript</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// code</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
<span class="c1">// Uncaught ReferenceError: i is not defined</span>
</code></pre></div></div>

<p><span class="highlight__code">let</span> is block scope which means the problem we had with <span class="highlight__code">var</span> doesn’t apply to <span class="highlight__code">let</span>.</p>

<h2 id="the-significance-of-const">The significance of const</h2>

<p>variables declared with <span class="highlight__code">const</span> values should be constants.</p>

<p><span class="highlight__code">const</span> cannot be redeclared or reassigned</p>

<p class="highlight__file-desc">JavaScript</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">greeting</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hi</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// Uncaught TypeError: Assignment to constant variable</span>

<span class="kd">const</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hi</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// Uncaught SyntaxError: Identifier 'greeting' has already been declared</span>
</code></pre></div></div>
<p><span class="highlight__code">const</span> must be initialized when declared</p>

<p>just like <span class="highlight__code">let</span> <span class="highlight__code">const</span> is hoisted but not initialized</p>

<p class="highlight__file-desc">JavaScript</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hoisted</span><span class="p">);</span>
<span class="c1">// Uncaught ReferenceError: hoisted is not defined</span>

<span class="kd">const</span> <span class="nx">hoisted</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hi I am hoisted but not initialized</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p><span class="highlight__code">const</span> variable declarations are block scoped like <span class="highlight__code">let</span></p>

<p class="highlight__file-desc">JavaScript</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">greet</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">);</span>
<span class="c1">// Uncaught ReferenceError: greet is not defined</span>
</code></pre></div></div>
<h3 id="const-isnt-really-constant">const isn’t really constant</h3>

<p>you can still change some value with a <span class="highlight__code">const</span> variable declaration.</p>

<p>In objects you can still change values.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Brian</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Brian</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">language</span><span class="p">:</span> <span class="dl">'</span><span class="s1">JavaScript</span><span class="dl">'</span>
<span class="p">}</span>

<span class="nx">Brian</span><span class="p">.</span><span class="nx">language</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">HTML</span><span class="dl">"</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Brian</span><span class="p">)</span>
<span class="c1">// {name: "Brian", language: "HTML"}</span>
</code></pre></div></div>

<p>Add and remove elements from arrays.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
<span class="err">​</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
<span class="err">​</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="c1">// [1, 2]</span>
<span class="err">​</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="err">​</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="c1">// [1,2,5]</span>
</code></pre></div></div>

<h2 id="summary-of-the-differences">summary of the differences</h2>

<p>Most of the time use <span class="highlight__code">let</span> and <span class="highlight__code">const</span>. Only should use <span class="highlight__code">var</span> when you are trying to use it as a stylistic choice.</p>

<ol>
  <li>
    <p><span class="highlight__code">let</span> and <span class="highlight__code">var</span> don’t have to be initialized when declared. <span class="highlight__code">const</span> has to be initialized when declared.</p>
  </li>
  <li>
    <p><span class="highlight__code">var</span> can be redefined and redeclared; <span class="highlight__code">let</span> can be redefined but not redeclared; <span class="highlight__code">const</span> can’t be redefined or redeclared.</p>
  </li>
  <li>
    <p><span class="highlight__code">var</span> declarations are globally or function scoped while <span class="highlight__code">let</span> and <span class="highlight__code">const</span> are block scoped.</p>
  </li>
  <li>
    <p>use <span class="highlight__code">const</span> when wanting to declare a variable that shouldn’t change.</p>
  </li>
</ol>

<p>happy coding!</p>

:ET