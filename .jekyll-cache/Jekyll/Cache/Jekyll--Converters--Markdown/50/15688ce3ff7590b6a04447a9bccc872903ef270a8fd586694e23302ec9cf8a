I"V<p><code class="highlight__code">Destructuring assignment</code> is a special JavaScript syntax that makes it possible to assign multiple variables to elements of an array or properties of an object. It is very useful when you are trying to assign multiple variables or get values of an array and/or object.</p>

<h2 id="syntax">Syntax</h2>

<p>Destructuring assignment syntax is very similar to how you would define an array. The main difference is that on the left side you define variable names for values you want to ‘unpack’ (take out) from an array or object.</p>

<p class="highlight__file-desc">Comparison of Array literal assignment and Destructuring syntax</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Array literal assignment</span>
  <span class="kd">let</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

  <span class="c1">// destructuring syntax</span>
  <span class="kd">let</span> <span class="p">[</span><span class="nx">firstNumber</span><span class="p">,</span> <span class="nx">secondNumber</span><span class="p">,</span> <span class="nx">thirdNumber</span><span class="p">,</span> <span class="nx">fourthNumber</span><span class="p">]</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">;</span>


  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstNumber</span><span class="p">,</span> <span class="nx">secondNumber</span><span class="p">,</span> <span class="nx">thirdNumber</span><span class="p">,</span> <span class="nx">fourthNumber</span><span class="p">);</span>
 <span class="c1">// 0 2 3 4</span>
</code></pre></div></div>

<p class="highlight__file-desc">Destructuring for arrays: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

  <span class="kd">let</span> <span class="p">[</span><span class="nx">firstNumber</span><span class="p">,</span> <span class="nx">secondNumber</span><span class="p">,</span> <span class="nx">thirdNumber</span><span class="p">,</span> <span class="nx">fourthNumber</span><span class="p">]</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstNumber</span><span class="p">,</span> <span class="nx">secondNumber</span><span class="p">,</span> <span class="nx">thirdNumber</span><span class="p">,</span> <span class="nx">fourthNumber</span><span class="p">);</span>
  <span class="c1">// 0 2 3 4</span>
</code></pre></div></div>

<p class="highlight__file-desc">Destructuring for objects: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">myDog</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lanky</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">color</span><span class="p">}</span> <span class="o">=</span> <span class="nx">myDog</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
  <span class="c1">// Lanky orange</span>
</code></pre></div></div>

<p><strong>Note</strong>: The reason why the variable names are set to the property name in objects is because destructuring retrieves the property names and expects to set them to that variable name. You can change the variable name to what you want and there is an example below on how to do that.</p>

<p class="highlight__file-desc">Assigning new variable names to destructuring for objects: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">myDog</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lanky</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">color</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orange</span><span class="dl">"</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="nx">myDogName</span><span class="p">,</span> <span class="na">color</span><span class="p">:</span> <span class="nx">myDogColor</span><span class="p">}</span> <span class="o">=</span> <span class="nx">myDog</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myDogName</span><span class="p">,</span> <span class="nx">myDogColor</span><span class="p">);</span>
  <span class="c1">// Lanky orange</span>
</code></pre></div></div>

<p>You can use destructuring with a variables declared with <code class="highlight__code">var</code>, <code class="highlight__code">let</code> or <code class="highlight__code">const</code>, I just decided to use <code class="highlight__code">let</code>.</p>

<h2 id="limitations">Limitations</h2>

<p>Destructuring is not supported in some browsers.</p>

<p>A solution to have a wider browser support would be to use a transpiler like <a href="https://babeljs.io/">babel</a> on your javascript files.</p>

<h2 id="examples">Examples</h2>

<h3 id="array-destructuring">Array Destructuring</h3>

<p class="highlight__file-desc">Assign variables seperate from variable declaration: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">anotherName</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Brian</span><span class="dl">'</span><span class="p">];</span>
  <span class="err">​</span>
  <span class="p">[</span><span class="nx">name</span><span class="p">,</span> <span class="nx">anotherName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">names</span><span class="p">;</span>
  <span class="err">​</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">anotherName</span><span class="p">);</span>
 <span class="c1">// Daniel Brian</span>
</code></pre></div></div>

<p class="highlight__file-desc">Having default values in case the value 'unpacked' from an array is undefined: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">];</span>

  <span class="kd">let</span> <span class="p">[</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">,</span> <span class="nx">anotherName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Brian</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">names</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">anotherName</span><span class="p">);</span>
  <span class="c1">// Daniel Brian</span>
</code></pre></div></div>

<p class="highlight__file-desc">Swapping two variable values: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">favoriteNumber</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">leastFavoriteNumber</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">favoriteNumber</span><span class="p">,</span> <span class="nx">leastFavoriteNumber</span><span class="p">);</span>
  <span class="c1">// 42 3</span>
  <span class="p">[</span><span class="nx">favoriteNumber</span><span class="p">,</span> <span class="nx">leastFavoriteNumber</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">leastFavoriteNumber</span><span class="p">,</span> <span class="nx">favoriteNumber</span><span class="p">];</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">favoriteNumber</span><span class="p">,</span> <span class="nx">leastFavoriteNumber</span><span class="p">);</span>
  <span class="c1">// 3 42</span>
</code></pre></div></div>

<p class="highlight__file-desc">Using what a function returns if it's an array: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">getMeSomeNumbers</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">42</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="p">[</span><span class="nx">firstNumber</span><span class="p">,</span> <span class="nx">secondNumber</span><span class="p">]</span> <span class="o">=</span> <span class="nx">getMeSomeNumbers</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstNumber</span><span class="p">,</span> <span class="nx">secondNumber</span><span class="p">);</span>
  <span class="c1">// 7 42</span>
</code></pre></div></div>

<p class="highlight__file-desc">Ignore values of arrays or return array values of a function if you dont want to assign them to variables using <span class="highlight__code">,</span>: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Brian</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">];</span>
  <span class="kd">let</span> <span class="p">[,</span><span class="nx">myName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">names</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myName</span><span class="p">);</span>
  <span class="c1">// Daniel</span>
  <span class="kd">function</span> <span class="nx">getMeSomeNumbers</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">42</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="p">[,</span><span class="nx">favoriteNumber</span><span class="p">]</span> <span class="o">=</span> <span class="nx">getMeSomeNumbers</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">favoriteNumber</span><span class="p">);</span>
  <span class="c1">// 42</span>
</code></pre></div></div>

<p class="highlight__file-desc">Assign the rest of an array to a variable using <span class="highlight__code">...yourVariableName</span>: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nx">getMeSomeNumbers</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">12</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="p">[,</span><span class="nx">favoriteNumber</span><span class="p">,</span> <span class="nx">anotherNumber</span><span class="p">,</span> <span class="p">...</span><span class="nx">newNumbers</span><span class="p">]</span> <span class="o">=</span> <span class="nx">getMeSomeNumbers</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">favoriteNumber</span><span class="p">,</span> <span class="nx">anotherNumber</span><span class="p">,</span> <span class="nx">newNumbers</span><span class="p">);</span>
  <span class="c1">// 42, 100, [1, 12]</span>
</code></pre></div></div>

<h3 id="object-destructuring">Object Destructuring</h3>

<p class="highlight__file-desc">Assign variables seperate from variable declaration: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">;</span>

  <span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">23</span><span class="p">});</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span>
  <span class="c1">// Daniel 23</span>
</code></pre></div></div>

<p><strong>Note</strong>: When you want to assign variables seperate from variable declarations, You have to have the parenthesis around the assignment or else it won’t work.</p>

<p class="highlight__file-desc">Providing default values in case the value unpacked from an object is undefined: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">me</span> <span class="o">=</span> <span class="p">{</span><span class="na">age</span><span class="p">:</span> <span class="mi">23</span><span class="p">};</span>
  <span class="kd">let</span> <span class="p">{</span><span class="nx">name</span><span class="o">=</span><span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">,</span> <span class="nx">age</span><span class="p">}</span> <span class="o">=</span> <span class="nx">me</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span>
  <span class="c1">// Daniel 23</span>
</code></pre></div></div>

<p class="highlight__file-desc">Assign new variable names and provide default values in one line: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">me</span> <span class="o">=</span> <span class="p">{</span><span class="na">age</span><span class="p">:</span> <span class="mi">23</span><span class="p">};</span>
  <span class="kd">let</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="nx">myName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="nx">myAge</span> <span class="o">=</span> <span class="mi">23</span><span class="p">}</span> <span class="o">=</span> <span class="nx">me</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myName</span><span class="p">,</span> <span class="nx">myAge</span><span class="p">);</span>
  <span class="c1">// Daniel 23</span>
</code></pre></div></div>

<p class="highlight__file-desc">Assign the rest of an objects properties to a variable using <span class="highlight__code">...yourVariableName</span>: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="p">...</span><span class="nx">bio</span><span class="p">}</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="na">favoriteColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">,</span> <span class="na">coolNumber</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="na">github</span><span class="p">:</span> <span class="dl">'</span><span class="s1">planeswalker1</span><span class="dl">'</span><span class="p">};</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">bio</span><span class="p">);</span>
<span class="c1">// Daniel 23 {favoriteColor: 'blue', coolNumber: 5, github: 'planeswalker1'}</span>
</code></pre></div></div>

<p class="highlight__file-desc">Combine both array and object destructuring to set nested values to variables: </p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">people</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">},</span>
    <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Brian</span><span class="dl">'</span><span class="p">},</span>
    <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Angel</span><span class="dl">'</span><span class="p">},</span>
    <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">David</span><span class="dl">'</span><span class="p">}</span>
  <span class="p">];</span>

  <span class="kd">const</span> <span class="p">[,,</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="nx">friend</span> <span class="p">}]</span> <span class="o">=</span> <span class="nx">people</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">friend</span><span class="p">);</span>
  <span class="c1">// Angel</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p><span class="highlight__code">Destructuring assignment</span> is very useful when you are trying to pass the elements of an array or properties of an obect to variables, and set nested values to variables.</p>
:ET