I"˛)<p>There‚Äôs a principle in programming called DRY, or Don‚Äôt Repeat Yourself. It usually means refactoring code by taking something done several times and turning it into a loop or a function. DRY code is easy to change, because you only have to make any change in one place.</p>

<h2 id="examples-of-non-dry-and-dry-code">Examples of Non-DRY and Dry Code</h2>

<p>We can use a loop to execute repeated code</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">chips</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">corn</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pita</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">potato</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">tortilla</span><span class="dl">'</span><span class="p">];</span>

  <span class="c1">// non DRY code</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chips</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chips</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chips</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>

  <span class="c1">// DRY code</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">chips</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chips</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>Another example is by taking repetitive bits of code and extracting them into a function.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">drinks</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">lemonade</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">soda</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">tea</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">water</span><span class="dl">'</span><span class="p">];</span>
  <span class="kd">let</span> <span class="nx">food</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">beans</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">chicken</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">rice</span><span class="dl">'</span><span class="p">];</span>
  <span class="c1">//non DRY code</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">drinks</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">drinks</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">drinks</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">drinks</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">food</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">food</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">food</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>

  <span class="c1">// DRY code</span>
  <span class="kd">function</span> <span class="nx">logItems</span> <span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">logItems</span><span class="p">(</span><span class="nx">drinks</span><span class="p">);</span>
  <span class="nx">logItems</span><span class="p">(</span><span class="nx">food</span><span class="p">);</span>
</code></pre></div></div>

<p>‚ÄúEasy to change‚Äù doesn‚Äôt just mean clean code, if you can‚Äôt figure out what a variable is for or what a function does based on its name, then it‚Äôs harder to change it later, when you might not remember exactly how your code works (or when somebody else is trying to change your code).</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// non DRY code</span>
  <span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">bananas</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dates</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dried figs</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">oranges</span><span class="dl">'</span><span class="p">];</span>

  <span class="kd">function</span> <span class="nx">hi</span> <span class="p">(</span><span class="nx">banana</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">banana</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">banana</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">hi</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>

  <span class="c1">// DRY code</span>
  <span class="kd">let</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">bananas</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dates</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dried figs</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">oranges</span><span class="dl">'</span><span class="p">];</span>

  <span class="kd">function</span> <span class="nx">logItems</span> <span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">logItems</span><span class="p">(</span><span class="nx">fruits</span><span class="p">);</span>
</code></pre></div></div>

<p>Using descriptive variable names make it easier to understand what the variable contains and in turn make it easier to use or change later on.</p>

<p>A good starting naming convention for your variables and functions would be:</p>

<ul>
  <li>singluar words for variables containing values. i.e: fruit, firstName, favoriteColor</li>
  <li>plural words for variables containing objects or arrays. i.e: fruits, names, myColors</li>
  <li>a description for variables containing functions. ie: logFruits, findPerson, getFavoriteColor</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Whenever you finish writing some code, you should always look back to see if there is any way you can DRY it up, including: using descriptive variable names, taking repetitive bits of code and extracting them into a function or loop.</p>
:ET