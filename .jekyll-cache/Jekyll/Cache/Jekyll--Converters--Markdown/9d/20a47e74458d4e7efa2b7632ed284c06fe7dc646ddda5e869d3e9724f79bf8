I"L<p><span class="highlight__code">Numbers</span>, <span class="highlight__code">strings</span>, <span class="highlight__code">booleans</span>, <span class="highlight__code">undefined</span>, and <span class="highlight__code">null</span> are 5 out of the 6 primitives, or basic data types. The other one is <span class="highlight__code">symbol</span>, which represents an identifier for object properties. Don’t worry about <span class="highlight__code">symbol</span> for now. A <strong>primitive</strong> data value is a single simple data value with no additional properties and methods.</p>

<!-- ========================= -->
<!-- The Concept of Data Types -->
<!-- ========================= -->

<h2 id="the-concept-of-data-types">The Concept of Data Types</h2>
<p>In programming, data types is an important concept. To be able to operate on variables, it is important to know something about the type. Without primitives, a computer can not safely solve this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">22</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> Daniel</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>  <span class="c1">// '22 Daniel'</span>
</code></pre></div></div>

<h3 id="javascript-types-are-dynamic">JavaScript Types are Dynamic</h3>

<p>JavaScript has dynamic types. This means that the same variable can be used to hold different data types:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">x</span><span class="p">;</span>  <span class="c1">// x is undefined</span>
  <span class="nx">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>  <span class="c1">// x is now a number</span>
  <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Dan</span><span class="dl">'</span><span class="p">;</span>  <span class="c1">// x is now a string</span>
</code></pre></div></div>

<!-- ========== -->
<!-- Data Types -->
<!-- ========== -->

<h2 id="data-types">Data Types</h2>

<!-- ====== -->
<!-- Number -->
<!-- ====== -->

<h3 id="number">Number</h3>

<p>the <span class="highlight__code">number</span> type represents numbers.</p>

<ul>
  <li><span class="highlight__code">21</span></li>
  <li><span class="highlight__code">4.25</span></li>
  <li><span class="highlight__code">0</span></li>
  <li><span class="highlight__code">-100</span></li>
  <li><span class="highlight__code">NaN</span> (means ‘not a number’, but is considered a number.)</li>
  <li><span class="highlight__code">Infinity</span></li>
  <li><span class="highlight__code">-Infinity</span></li>
  <li><span class="highlight__code">let favoriteNumber = 9;</span></li>
</ul>

<p>You can use certain methods on numbers. A <strong>method</strong> is a function which is a property of an object.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mf">3.14159265359</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>  <span class="c1">// 3.14</span>
</code></pre></div></div>

<!-- ====== -->
<!-- String -->
<!-- ====== -->

<h3 id="string">String</h3>

<p>the <span class="highlight__code">string</span> type represents text. It is contained in ‘single’ or “double” quotes. You can use quotes inside a string, as long as they don’t match the quotes surrounding the string.</p>

<ul>
  <li><span class="highlight__code">‘Hello, world!’</span></li>
  <li><span class="highlight__code">‘Brian said, “Hello There!”’</span></li>
  <li><span class="highlight__code">“42”</span></li>
  <li><span class="highlight__code">let greeting = ‘How are you doing?’;</span></li>
</ul>

<p>You can use certain methods on strings.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span>  <span class="c1">// 'DANIEL'</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>  <span class="c1">// 'n'</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">().</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>  <span class="c1">// 'N'</span>
  
</code></pre></div></div>

<!-- ======= -->
<!-- Boolean -->
<!-- ======= -->

<h3 id="boolean">Boolean</h3>

<p>The <span class="highlight__code">Boolean</span> data type can only hold 2 possible values:</p>

<ul>
  <li><span class="highlight__code">true</span></li>
  <li><span class="highlight__code">false</span></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">10</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1">// true</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">);</span>  <span class="c1">// false</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">);</span>  <span class="c1">// false</span>

  <span class="kd">let</span> <span class="nx">isNiceDay</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">isNiceDay</span><span class="p">);</span>  <span class="c1">// true</span>
</code></pre></div></div>

<!-- ========= -->
<!-- Undefined -->
<!-- ========= -->

<h3 id="undefined">Undefined</h3>

<p>When declaring a variable without giving it a value (<code class="highlight__code">let number;</code>), JavaScript creates the variable without a value, hence <code class="highlight__code">undefined</code>. Even when declaring a variable and assigning it a value at the same time (<code class="highlight__code">let favoriteNumber = 9;</code>), JavaScript actually creates the variable initially without a value, temporarily giving it a value of <code class="highlight__code">undefined</code>, before then assigning it the value to the right of the equals sign.</p>

<p>Additionally, there are some functions and methods that do not return any value, in which case the return value is actually <code class="highlight__code">undefined</code>.</p>

<!-- ==== -->
<!-- Null -->
<!-- ==== -->

<h3 id="null">Null</h3>

<p>The <code class="highlight__code">null</code> data type is supposed to represent something that doesn’t exist. It’s data type is actually an object. You can consider it a bug, since it should be <code class="highlight__code">null</code>.</p>

<p>You can empty a variable by setting it to null:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">22</span><span class="p">;</span>

  <span class="nx">number</span> <span class="o">=</span> <span class="kc">null</span>  <span class="c1">// number is now null</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span>  <span class="c1">// null</span>

  <span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span>
    <span class="na">eyeColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">black</span><span class="dl">'</span>
    <span class="p">};</span>

  <span class="nx">person</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>  <span class="c1">// person is now null</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>  <span class="c1">// null</span>
</code></pre></div></div>

<!-- =================== -->
<!-- Data Type Detection -->
<!-- =================== -->

<h2 id="data-type-detection">Data Type Detection</h2>

<p>It’s important to understand the difference between the number <span class="highlight__code">5</span> and the string <span class="highlight__code">“5”</span>. To a computer, they are two entirely different things, as shown in this example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">56</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">otherNumber</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

  <span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">56</span><span class="dl">'</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">otherString</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span> <span class="o">+</span> <span class="nx">otherNumber</span><span class="p">);</span>  <span class="c1">// 58</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span> <span class="o">+</span> <span class="nx">otherString</span><span class="p">);</span>  <span class="c1">// '562'</span>
</code></pre></div></div>

<p>When we added <code class="highlight__code">56</code> to <code class="highlight__code">2</code> we got <code class="highlight__code">58</code>, but when we added <code class="highlight__code">'56'</code> to <code class="highlight__code">'2'</code> it concatenated, link (things) together in a chain or series, the two strings together.</p>

<p>Likewise, the boolean <code class="highlight__code">true</code> is not the same as the string <code class="highlight__code">'true'</code>.</p>

<p>In the example above, the <code class="highlight__code">+</code> operator works on both numbers and strings, just differently. Usually methods will only work on a specific data type. For example, <code class="highlight__code">3.14159.toFixed(2);</code> works just fine, but trying to do <code class="highlight__code">'3.14159'.toFixed(2);</code> results in an <span class="highlight__code">error</span> because the <code class="highlight__code">toFixed</code> method doesn’t work on a <span class="highlight__code">string</span>. Likewise, <code class="highlight__code">'Hello'.charAt(2);</code> works, but <code class="highlight__code">314159.charAt(2);</code> does not.</p>

<p>We can check the data type of a variable or value using <code class="highlight__code">typeof</code> as follows:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="mi">5</span><span class="p">);</span>  <span class="c1">// 'number'</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="dl">'</span><span class="s1">5</span><span class="dl">'</span><span class="p">);</span>  <span class="c1">// 'string'</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">true</span><span class="p">);</span>  <span class="c1">// 'boolean'</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">);</span>  <span class="c1">// 'string'</span>

  <span class="kd">let</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">How are you doing?</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">greeting</span><span class="p">);</span>  <span class="c1">// 'string'</span>
</code></pre></div></div>

<!-- ==================== -->
<!-- Data Type Conversion -->
<!-- ==================== -->

<h2 id="data-type-conversion">Data Type Conversion</h2>

<p>Often input from a web browser will come in as a <span class="highlight__code">string</span> and we will need to convert it to a <span class="highlight__code">number</span> before working with it.</p>

<p>We can convert a string to a number by passing it to the <code class="highlight__code">Number()</code> function:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">inputAge</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">22</span><span class="dl">'</span><span class="p">;</span>  <span class="c1">// inputAge is now a string</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">inputAge</span><span class="p">);</span>  <span class="c1">// '22'</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">inputAge</span><span class="p">);</span>  <span class="c1">// 'string'</span>

  <span class="kd">let</span> <span class="nx">myAge</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">inputAge</span><span class="p">);</span> <span class="c1">// myAge is now a number</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myAge</span><span class="p">);</span>  <span class="c1">// 22</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">myAge</span><span class="p">);</span>  <span class="c1">// 'number'</span>
</code></pre></div></div>

<p>Note that if you try to use the <code class="highlight__code">Number</code> function to convert a string not actually containing a number, the result is the number <code class="highlight__code">NaN</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Daniel</span><span class="dl">'</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">nameNumber</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nameNumber</span><span class="p">);</span>  <span class="c1">// NaN</span>
</code></pre></div></div>

<p>If you need to go the other way around, you can convert a number to a string by calling the <code class="highlight__code">String</code> function on the number:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">22</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span>  <span class="c1">// 22</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">number</span><span class="p">);</span>  <span class="c1">// 'number'</span>

  <span class="kd">let</span> <span class="nx">stringNumber</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stringNumber</span><span class="p">);</span>  <span class="c1">// '22'</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">stringNumber</span><span class="p">);</span>  <span class="c1">// 'string'</span>
</code></pre></div></div>

<!-- ========== -->
<!-- Conclusion -->
<!-- ========== -->

<h2 id="conclusion">Conclusion</h2>

<p><span class="highlight__code">Numbers</span>, <span class="highlight__code">strings</span>, <span class="highlight__code">booleans</span>, <span class="highlight__code">undefined</span>, <span class="highlight__code">null</span>, and <span class="highlight__code">symbol</span> are the primitives, or basic data types. Without primitives, a computer can not safely solve problems.</p>
:ET