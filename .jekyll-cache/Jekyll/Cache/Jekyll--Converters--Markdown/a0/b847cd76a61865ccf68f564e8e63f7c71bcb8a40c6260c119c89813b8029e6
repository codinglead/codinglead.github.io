I"¥<p>Factorials is used to find out how many ways you can order a set of things. It has an exclamation point right after a number. looks like this <code class="highlight__code">n!</code>.</p>

<h2 id="how-to-find-a-factorial">how to find a factorial</h2>

<p>The formula to find a factorial is n! = n * (n - 1) * (n-2)‚Ä¶ until n is zero. You can also think of it as the product of all whole numbers of 1 through n.</p>

<h2 id="example-of-a-factorial">example of a factorial</h2>

<p>How to find 4! which is read as ‚Äúfour factorial‚Äù.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="nx">x</span> <span class="mi">2</span> <span class="nx">X</span> <span class="mi">3</span> <span class="nx">X</span> <span class="mi">4</span> <span class="o">=</span> <span class="mi">24</span> <span class="c1">// 4!</span>
</code></pre></div></div>

<h2 id="how-to-implement-using-javascript">how to implement using JavaScript</h2>

<p>To implement a factorial I will be using recursion. Recursion is when a function call itself.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">factorial</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// How the function will exit out of the</span>
  <span class="c1">// recursion</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">===</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">n</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
 
  <span class="c1">// This will endlessly call the function</span>
  <span class="c1">// until the condition is met</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When using recursion you need to have an exit condition because it will run forever and break your program.</p>

<h2 id="example-using-the-factorial-function">example using the factorial function</h2>

<p>Finding the <code class="highlight__code">factorial</code> using the function.</p>

<p>When the JavaScript is executed It will get the current number (which is given by passing it into the function) and  multiply it to itself minus 1.</p>

<p>It will keep repeating until the current number is one or zero. If the current number is one or zero it will multiply by 1.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 4 * (4 - 1) * (3 - 1) * (2 - 1) * (1)</span>
<span class="c1">// 4 * 3 * 2 * 1 </span>
<span class="nx">factorial</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="c1">// 24</span>
</code></pre></div></div>

<h2 id="conclusion">conclusion</h2>

<p><code class="highlight__code">Factorials</code> can be useful when wanting to know how many different ways something can be ordered or organized. It is also found in many areas of mathematics.</p>
:ET